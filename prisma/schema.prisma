generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String        @id @default(cuid())
  email                      String        @unique
  password                   String
  name                       String?
  bio                        String?
  profileImageUrl            String?
  role                       UserRole      @default(ATHLETE)
  emailVerified              DateTime?
  image                      String?
  isActive                   Boolean       @default(true)
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  passwordResetExpiresAt     DateTime?
  passwordResetToken         String?       @unique
  emailVerificationExpiresAt DateTime?
  emailVerificationToken     String?       @unique
  accounts                   Account[]
  comments                   Comment[]
  progressLogs               ProgressLog[]
  ratings                    Rating[]
  sessions                   Session[]
  subscription               Subscription?
  workouts                   Workout[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workouts    Workout[]

  @@index([slug])
  @@index([isActive])
  @@map("categories")
}

model Equipment {
  id               String             @id @default(cuid())
  name             String             @unique
  description      String?
  imageUrl         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  exercises        Exercise[]
  workoutEquipment WorkoutEquipment[]

  @@index([name])
  @@map("equipment")
}

model Exercise {
  id               String            @id @default(cuid())
  name             String
  description      String?
  instructions     String?
  videoUrl         String?
  imageUrl         String?
  muscleGroups     String[]
  equipmentId      String?
  difficulty       DifficultyLevel   @default(BEGINNER)
  createdBy        String
  isPublic         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  equipment        Equipment?        @relation(fields: [equipmentId], references: [id])
  workoutExercises WorkoutExercise[]

  @@index([name])
  @@index([muscleGroups])
  @@index([difficulty])
  @@index([isPublic])
  @@map("exercises")
}

model Workout {
  id                String             @id @default(cuid())
  title             String
  slug              String             @unique
  description       String?
  instructions      String?
  imageUrl          String?
  videoUrl          String?
  estimatedDuration Int?
  difficulty        DifficultyLevel    @default(BEGINNER)
  coachId           String
  categoryId        String
  isPublished       Boolean            @default(false)
  isPublic          Boolean            @default(true)
  viewCount         Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  comments          Comment[]
  progressLogs      ProgressLog[]
  ratings           Rating[]
  workoutEquipment  WorkoutEquipment[]
  workoutExercises  WorkoutExercise[]
  workoutTags       WorkoutTag[]
  category          Category           @relation(fields: [categoryId], references: [id])
  coach             User               @relation(fields: [coachId], references: [id], onDelete: Cascade)

  @@index([slug])
  @@index([coachId])
  @@index([categoryId])
  @@index([difficulty])
  @@index([isPublished])
  @@index([isPublic])
  @@map("workouts")
}

model WorkoutExercise {
  id         String   @id @default(cuid())
  workoutId  String
  exerciseId String
  order      Int
  sets       Int?
  reps       String?
  weight     String?
  restTime   Int?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@unique([workoutId, exerciseId, order])
  @@index([workoutId])
  @@index([exerciseId])
  @@map("workout_exercises")
}

model Tag {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String       @unique
  type        TagType      @default(GENERAL)
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  workoutTags WorkoutTag[]

  @@index([slug])
  @@index([type])
  @@map("tags")
}

model WorkoutTag {
  id        String   @id @default(cuid())
  workoutId String
  tagId     String
  createdAt DateTime @default(now())
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@unique([workoutId, tagId])
  @@index([workoutId])
  @@index([tagId])
  @@map("workout_tags")
}

model WorkoutEquipment {
  id          String    @id @default(cuid())
  workoutId   String
  equipmentId String
  isRequired  Boolean   @default(true)
  createdAt   DateTime  @default(now())
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  workout     Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@unique([workoutId, equipmentId])
  @@index([workoutId])
  @@index([equipmentId])
  @@map("workout_equipment")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  stripeSubscriptionId String?            @unique
  stripeCustomerId     String?
  status               SubscriptionStatus @default(INACTIVE)
  priceId              String?
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([stripeSubscriptionId])
  @@map("subscriptions")
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  workoutId String
  userId    String
  parentId  String?
  isEdited  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout   Workout   @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@index([workoutId])
  @@index([userId])
  @@index([parentId])
  @@map("comments")
}

model Rating {
  id        String   @id @default(cuid())
  rating    Int
  workoutId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@unique([workoutId, userId])
  @@index([workoutId])
  @@index([userId])
  @@index([rating])
  @@map("ratings")
}

model ProgressLog {
  id          String   @id @default(cuid())
  userId      String
  workoutId   String
  completedAt DateTime
  duration    Int?
  notes       String?
  difficulty  Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout     Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workoutId])
  @@index([completedAt])
  @@map("progress_logs")
}

enum UserRole {
  ATHLETE
  COACH
  ADMIN
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum TagType {
  BODY_PART
  EQUIPMENT
  WORKOUT_TYPE
  GENERAL
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  TRIALING
}
